//package com.example.dailywork.data.repository
//
//import com.example.dailywork.data.model.Goal
//import com.example.dailywork.data.model.Milestone
//import com.example.dailywork.data.model.Task
//import com.google.firebase.firestore.FirebaseFirestore
//import com.google.firebase.firestore.SetOptions
//
//class GoalRepository {
//
//    private val db = FirebaseFirestore.getInstance()
//
//    // Function to add a new goal along with milestones and tasks to Firestore
//    fun addGoalWithMilestonesAndTasks(
//        userId: String,
//        goal: Goal,
//        milestones: List<Milestone>,
//        onSuccess: () -> Unit,
//        onFailure: (Exception) -> Unit
//    ) {
//        // Reference for the goal
//        val goalRef = db.collection("users").document(userId).collection("goals").document()
//
//        // Set the goalId to the document ID generated by Firestore
//        val goalWithId = goal.copy(goalId = goalRef.id)
//
//        // Start a batch write to ensure atomicity
//        val batch = db.batch()
//
//        // Add the goal to Firestore
//        batch.set(goalRef, goalWithId)
//
//        // Add milestones and their associated tasks
//        milestones.forEach { milestone ->
//            val milestoneRef = goalRef.collection("milestones").document()
//            val milestoneWithId = milestone.copy(milestoneId = milestoneRef.id)
//
//            // Set each milestone
//            batch.set(milestoneRef, milestoneWithId)
//
//            // Add tasks for the milestone
//            milestone.tasks.forEach { task ->
//                val taskRef = milestoneRef.collection("tasks").document()
//                batch.set(taskRef, task)
//            }
//        }
//
//        // Commit the batch
//        batch.commit()
//            .addOnSuccessListener { onSuccess() }
//            .addOnFailureListener { exception -> onFailure(exception) }
//    }
//
//    // Function to retrieve all goals along with their milestones and tasks for a specific user
//    fun getGoalsWithMilestonesAndTasks(
//        userId: String,
//        onSuccess: (List<Goal>) -> Unit,
//        onFailure: (Exception) -> Unit
//    ) {
//        val userGoalsRef = db.collection("users").document(userId).collection("goals")
//
//        userGoalsRef.get()
//            .addOnSuccessListener { goalDocuments ->
//                val goals = mutableListOf<Goal>()
//
//                // Iterate through each goal
//                for (goalDoc in goalDocuments) {
//                    val goal = goalDoc.toObject(Goal::class.java)?.copy(goalId = goalDoc.id)
//
//                    if (goal != null) {
//                        // For each goal, retrieve its milestones
//                        val milestoneRef = userGoalsRef.document(goal.goalId).collection("milestones")
//                        milestoneRef.get()
//                            .addOnSuccessListener { milestoneDocuments ->
//                                val milestones = milestoneDocuments.mapNotNull { milestoneDoc ->
//                                    val milestone = milestoneDoc.toObject(Milestone::class.java)?.copy(milestoneId = milestoneDoc.id)
//
//                                    if (milestone != null) {
//                                        // For each milestone, retrieve its tasks
//                                        val taskRef = milestoneRef.document(milestone.milestoneId).collection("tasks")
//                                        taskRef.get()
//                                            .addOnSuccessListener { taskDocuments ->
//                                                val tasks = taskDocuments.mapNotNull { taskDoc ->
//                                                    taskDoc.toObject(Task::class.java)
//                                                }
//                                                milestone.tasks = tasks
//                                            }
//                                    }
//                                    milestone
//                                }
//
//                                milestones.also { goal.milestones }
//                                goals.add(goal)
//
//                                if (goals.size == goalDocuments.size()) {
//                                    onSuccess(goals) // Return when all goals are retrieved
//                                }
//                            }
//                            .addOnFailureListener { exception -> onFailure(exception) }
//                    }
//                }
//            }
//            .addOnFailureListener { exception -> onFailure(exception) }
//    }
//
//    // Function to update an existing goal in Firestore
//    fun updateGoal(
//        userId: String,
//        goalId: String,
//        updatedGoal: Goal,
//        onSuccess: () -> Unit,
//        onFailure: (Exception) -> Unit
//    ) {
//        db.collection("users").document(userId).collection("goals").document(goalId)
//            .set(updatedGoal, SetOptions.merge()) // Merges the updates
//            .addOnSuccessListener { onSuccess() }
//            .addOnFailureListener { exception -> onFailure(exception) }
//    }
//
//    // Function to delete a goal and its associated milestones and tasks from Firestore
//    fun deleteGoal(
//        userId: String,
//        goalId: String,
//        onSuccess: () -> Unit,
//        onFailure: (Exception) -> Unit
//    ) {
//        val goalRef = db.collection("users").document(userId).collection("goals").document(goalId)
//
//        // Start a batch to delete the goal, its milestones, and tasks
//        val batch = db.batch()
//
//        // First, delete the milestones and tasks associated with the goal
//        goalRef.collection("milestones").get()
//            .addOnSuccessListener { milestoneDocuments ->
//                for (milestoneDoc in milestoneDocuments) {
//                    val milestoneRef = goalRef.collection("milestones").document(milestoneDoc.id)
//
//                    // Delete tasks under the milestone
//                    milestoneRef.collection("tasks").get()
//                        .addOnSuccessListener { taskDocuments ->
//                            for (taskDoc in taskDocuments) {
//                                batch.delete(milestoneRef.collection("tasks").document(taskDoc.id))
//                            }
//                        }
//
//                    // Delete the milestone
//                    batch.delete(milestoneRef)
//                }
//
//                // Finally, delete the goal
//                batch.delete(goalRef)
//
//                // Commit the batch
//                batch.commit()
//                    .addOnSuccessListener { onSuccess() }
//                    .addOnFailureListener { exception -> onFailure(exception) }
//            }
//            .addOnFailureListener { exception -> onFailure(exception) }
//    }
//
//    fun getAllGoals(
//        userId: String,
//        onSuccess: (List<Goal>) -> Unit,
//        onFailure: (Exception) -> Unit
//    ) {
//        db.collection("users").document(userId).collection("goals")
//            .get()
//            .addOnSuccessListener { result ->
//                val goals = result.documents.mapNotNull { document ->
//                    document.toObject(Goal::class.java)?.copy(goalId = document.id)
//                }
//                onSuccess(goals)
//            }
//            .addOnFailureListener { exception ->
//                onFailure(exception)
//            }
//    }
//
//}



//Newly Added Code
package com.example.dailywork.data.repository

import com.example.dailywork.data.model.Goal
import com.google.firebase.firestore.FirebaseFirestore

class GoalRepository {
    private val db = FirebaseFirestore.getInstance()

    // Add a goal for a specific user to Firestore
    fun addGoal(
        userId: String,
        goal: Goal,
        onSuccess: () -> Unit,
        onFailure: (Exception) -> Unit
    ) {
        val goalRef = db.collection("users").document(userId).collection("goals").document()

        val newGoal = goal.copy(goalId = goalRef.id) // Assign Firestore document ID to goalId

        goalRef.set(newGoal)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { exception -> onFailure(exception) }
    }
}
